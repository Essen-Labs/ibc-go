// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/channel/v2/txv2.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v2 "github.com/cosmos/ibc-go/v9/modules/core/23-commitment/types/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgProvideCounterparty defines the message used to provide the counterparty client
// identifier. Can only be invoked one time by the signer of MsgCreateClient if the counterparty
// client identifier was not provided in the initial MsgCreateClient message.
type MsgProvideCounterparty struct {
	// client unique identifier
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// counterparty channel identifier
	CounterpartyChannelId string `protobuf:"bytes,2,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty"`
	// the merkle path that all ICS24 paths will be stored under
	MerklePathPrefix *v2.MerklePath `protobuf:"bytes,3,opt,name=merkle_path_prefix,json=merklePathPrefix,proto3" json:"merkle_path_prefix,omitempty"`
	// signer address
	Signer string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProvideCounterparty) Reset()         { *m = MsgProvideCounterparty{} }
func (m *MsgProvideCounterparty) String() string { return proto.CompactTextString(m) }
func (*MsgProvideCounterparty) ProtoMessage()    {}
func (*MsgProvideCounterparty) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1d1ecc1699ec9c, []int{0}
}
func (m *MsgProvideCounterparty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvideCounterparty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvideCounterparty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvideCounterparty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvideCounterparty.Merge(m, src)
}
func (m *MsgProvideCounterparty) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvideCounterparty) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvideCounterparty.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvideCounterparty proto.InternalMessageInfo

// MsgProvideCounterpartyResponse defines the Msg/ProvideCounterparty response type.
type MsgProvideCounterpartyResponse struct {
}

func (m *MsgProvideCounterpartyResponse) Reset()         { *m = MsgProvideCounterpartyResponse{} }
func (m *MsgProvideCounterpartyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProvideCounterpartyResponse) ProtoMessage()    {}
func (*MsgProvideCounterpartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1d1ecc1699ec9c, []int{1}
}
func (m *MsgProvideCounterpartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvideCounterpartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvideCounterpartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvideCounterpartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvideCounterpartyResponse.Merge(m, src)
}
func (m *MsgProvideCounterpartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvideCounterpartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvideCounterpartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvideCounterpartyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgProvideCounterparty)(nil), "ibc.core.channel.v2.MsgProvideCounterparty")
	proto.RegisterType((*MsgProvideCounterpartyResponse)(nil), "ibc.core.channel.v2.MsgProvideCounterpartyResponse")
}

func init() { proto.RegisterFile("ibc/core/channel/v2/txv2.proto", fileDescriptor_9f1d1ecc1699ec9c) }

var fileDescriptor_9f1d1ecc1699ec9c = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbd, 0xae, 0xd3, 0x30,
	0x14, 0xc7, 0x63, 0x40, 0x57, 0x5c, 0x33, 0x5c, 0x94, 0x42, 0x5b, 0x15, 0xc9, 0x54, 0x5d, 0xa8,
	0x40, 0xb5, 0x21, 0x45, 0x48, 0x65, 0xa4, 0x53, 0x87, 0x4a, 0x51, 0xd9, 0x58, 0xa2, 0xc4, 0x31,
	0x8e, 0x45, 0x1c, 0x47, 0xb6, 0x1b, 0xda, 0x95, 0x09, 0x31, 0xf1, 0x08, 0x3c, 0x02, 0x8f, 0xc1,
	0xd8, 0x91, 0x11, 0xb5, 0x03, 0x3c, 0x06, 0xca, 0x47, 0x49, 0x87, 0x2c, 0x4c, 0xf1, 0x39, 0xbf,
	0xff, 0xc9, 0xf9, 0x84, 0x48, 0x44, 0x94, 0x50, 0xa5, 0x19, 0xa1, 0x49, 0x98, 0x65, 0x2c, 0x25,
	0x85, 0x47, 0xec, 0xae, 0xf0, 0x70, 0xae, 0x95, 0x55, 0x6e, 0x4f, 0x44, 0x14, 0x97, 0x1c, 0x37,
	0x1c, 0x17, 0xde, 0xe8, 0x01, 0x57, 0x5c, 0x55, 0x9c, 0x94, 0xaf, 0x5a, 0x3a, 0x1a, 0x50, 0x65,
	0xa4, 0x32, 0x44, 0x1a, 0x4e, 0x8a, 0x17, 0xe5, 0xa7, 0x01, 0x4f, 0xda, 0x1c, 0x4a, 0x4a, 0x61,
	0x25, 0xcb, 0x6c, 0x99, 0xa6, 0xb5, 0x6a, 0xe1, 0xe4, 0x0f, 0x80, 0xfd, 0xb5, 0xe1, 0xbe, 0x56,
	0x85, 0x88, 0xd9, 0x52, 0x6d, 0x33, 0xcb, 0x74, 0x1e, 0x6a, 0xbb, 0x77, 0x1f, 0xc1, 0x6b, 0x9a,
	0x0a, 0x96, 0xd9, 0x40, 0xc4, 0x43, 0x30, 0x06, 0xd3, 0xeb, 0xcd, 0xdd, 0xda, 0xb1, 0x8a, 0xdd,
	0x57, 0x70, 0x40, 0x2f, 0xc4, 0x41, 0x53, 0x6a, 0x29, 0xbd, 0x55, 0x49, 0x1f, 0x5e, 0xe2, 0x65,
	0x4d, 0x57, 0xb1, 0xeb, 0x43, 0x57, 0x32, 0xfd, 0x21, 0x65, 0x41, 0x1e, 0xda, 0x24, 0xc8, 0x35,
	0x7b, 0x2f, 0x76, 0xc3, 0xdb, 0x63, 0x30, 0xbd, 0xe7, 0x4d, 0x70, 0xdb, 0x79, 0x5b, 0x67, 0xe1,
	0xe1, 0x75, 0x15, 0xe1, 0x87, 0x36, 0xd9, 0xdc, 0x97, 0xff, 0xde, 0x7e, 0x15, 0xeb, 0xf6, 0xe1,
	0x95, 0x11, 0x3c, 0x63, 0x7a, 0x78, 0xa7, 0x4a, 0xdc, 0x58, 0xaf, 0x6f, 0x3e, 0x7f, 0x7b, 0xec,
	0x7c, 0xfa, 0xfd, 0xfd, 0x69, 0xe3, 0x98, 0x8c, 0x21, 0xea, 0xee, 0x74, 0xc3, 0x4c, 0xae, 0x32,
	0xc3, 0xbc, 0x2f, 0x00, 0xde, 0x5c, 0x82, 0xb5, 0xe1, 0xee, 0x47, 0xd8, 0xeb, 0x1a, 0xce, 0x33,
	0xdc, 0xb1, 0x25, 0xdc, 0xfd, 0xff, 0xd1, 0xfc, 0x3f, 0xc4, 0xe7, 0x62, 0xde, 0xbc, 0xfd, 0x71,
	0x44, 0xe0, 0x70, 0x44, 0xe0, 0xd7, 0x11, 0x81, 0xaf, 0x27, 0xe4, 0x1c, 0x4e, 0xc8, 0xf9, 0x79,
	0x42, 0xce, 0xbb, 0x05, 0x17, 0x36, 0xd9, 0x46, 0xe5, 0x90, 0x48, 0x73, 0x00, 0x22, 0xa2, 0x33,
	0xae, 0x48, 0xb1, 0x20, 0x52, 0xc5, 0xdb, 0x94, 0x99, 0x7a, 0xf9, 0xcf, 0x5f, 0xce, 0xce, 0x37,
	0x66, 0xf7, 0x39, 0x33, 0xd1, 0x55, 0xb5, 0xf5, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f,
	0xdf, 0x86, 0xf7, 0x84, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CounterpartyMsgClient is the client API for CounterpartyMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterpartyMsgClient interface {
	// ProvideCounterparty defines a rpc handler method for MsgProvideCounterparty.
	ProvideCounterparty(ctx context.Context, in *MsgProvideCounterparty, opts ...grpc.CallOption) (*MsgProvideCounterpartyResponse, error)
}

type counterpartyMsgClient struct {
	cc grpc1.ClientConn
}

func NewCounterpartyMsgClient(cc grpc1.ClientConn) CounterpartyMsgClient {
	return &counterpartyMsgClient{cc}
}

func (c *counterpartyMsgClient) ProvideCounterparty(ctx context.Context, in *MsgProvideCounterparty, opts ...grpc.CallOption) (*MsgProvideCounterpartyResponse, error) {
	out := new(MsgProvideCounterpartyResponse)
	err := c.cc.Invoke(ctx, "/ibc.core.channel.v2.CounterpartyMsg/ProvideCounterparty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterpartyMsgServer is the server API for CounterpartyMsg service.
type CounterpartyMsgServer interface {
	// ProvideCounterparty defines a rpc handler method for MsgProvideCounterparty.
	ProvideCounterparty(context.Context, *MsgProvideCounterparty) (*MsgProvideCounterpartyResponse, error)
}

// UnimplementedCounterpartyMsgServer can be embedded to have forward compatible implementations.
type UnimplementedCounterpartyMsgServer struct {
}

func (*UnimplementedCounterpartyMsgServer) ProvideCounterparty(ctx context.Context, req *MsgProvideCounterparty) (*MsgProvideCounterpartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideCounterparty not implemented")
}

func RegisterCounterpartyMsgServer(s grpc1.Server, srv CounterpartyMsgServer) {
	s.RegisterService(&_CounterpartyMsg_serviceDesc, srv)
}

func _CounterpartyMsg_ProvideCounterparty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvideCounterparty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMsgServer).ProvideCounterparty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.core.channel.v2.CounterpartyMsg/ProvideCounterparty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMsgServer).ProvideCounterparty(ctx, req.(*MsgProvideCounterparty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CounterpartyMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.core.channel.v2.CounterpartyMsg",
	HandlerType: (*CounterpartyMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvideCounterparty",
			Handler:    _CounterpartyMsg_ProvideCounterparty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/core/channel/v2/txv2.proto",
}

func (m *MsgProvideCounterparty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvideCounterparty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvideCounterparty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxv2(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MerklePathPrefix != nil {
		{
			size, err := m.MerklePathPrefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxv2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintTxv2(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTxv2(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProvideCounterpartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvideCounterpartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvideCounterpartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTxv2(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxv2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgProvideCounterparty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTxv2(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovTxv2(uint64(l))
	}
	if m.MerklePathPrefix != nil {
		l = m.MerklePathPrefix.Size()
		n += 1 + l + sovTxv2(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxv2(uint64(l))
	}
	return n
}

func (m *MsgProvideCounterpartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTxv2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxv2(x uint64) (n int) {
	return sovTxv2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgProvideCounterparty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxv2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvideCounterparty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvideCounterparty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxv2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxv2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxv2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxv2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxv2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxv2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerklePathPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxv2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxv2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxv2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MerklePathPrefix == nil {
				m.MerklePathPrefix = &v2.MerklePath{}
			}
			if err := m.MerklePathPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxv2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxv2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxv2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxv2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxv2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvideCounterpartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxv2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvideCounterpartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvideCounterpartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTxv2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxv2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxv2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxv2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxv2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxv2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxv2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxv2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxv2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxv2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxv2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxv2 = fmt.Errorf("proto: unexpected end of group")
)
