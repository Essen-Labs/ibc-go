// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/channel/v2/channel.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	v2 "github.com/cosmos/ibc-go/v9/modules/core/23-commitment/types/v2"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChannelEnd defines the channel end on a chain that is implementing the version 2 IBC protocol
// Each side will maintain its own Channel to create an IBC channel
// The channel will be referenced by a channelID which will be used to send packets
// to the counterparty
// The channel will contain the client identifier that will provide proof verification for the channel
// and the counterparty channel identifier that the other channel end will be using
// to send packets to our channel end.
type ChannelEnd struct {
	// the client identifier of the light client representing the counterparty chain
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// the counterparty identifier that must be used by packets sent by counterparty
	// to our channel end.
	CounterpartyChannelId string `protobuf:"bytes,2,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty"`
	// the key path used to store packet flow messages that the counterparty
	// will use to send to us. In backwards compatible cases, we will append the channelID and sequence in order to create
	// the final path.
	MerklePathPrefix v2.MerklePath `protobuf:"bytes,3,opt,name=merkle_path_prefix,json=merklePathPrefix,proto3" json:"merkle_path_prefix"`
}

func (m *ChannelEnd) Reset()         { *m = ChannelEnd{} }
func (m *ChannelEnd) String() string { return proto.CompactTextString(m) }
func (*ChannelEnd) ProtoMessage()    {}
func (*ChannelEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e9b57d8f218397d, []int{0}
}
func (m *ChannelEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelEnd.Merge(m, src)
}
func (m *ChannelEnd) XXX_Size() int {
	return m.Size()
}
func (m *ChannelEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelEnd proto.InternalMessageInfo

func (m *ChannelEnd) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ChannelEnd) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *ChannelEnd) GetMerklePathPrefix() v2.MerklePath {
	if m != nil {
		return m.MerklePathPrefix
	}
	return v2.MerklePath{}
}

func init() {
	proto.RegisterType((*ChannelEnd)(nil), "ibc.core.channel.v2.ChannelEnd")
}

func init() { proto.RegisterFile("ibc/core/channel/v2/channel.proto", fileDescriptor_7e9b57d8f218397d) }

var fileDescriptor_7e9b57d8f218397d = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x1b, 0x15, 0x71, 0xf1, 0x22, 0x55, 0x71, 0x4c, 0x88, 0x73, 0x17, 0x77, 0x59, 0x23,
	0x55, 0x04, 0xc1, 0xd3, 0xc4, 0xc3, 0x0e, 0xc2, 0xd8, 0x61, 0x07, 0x2f, 0xa5, 0x4d, 0x63, 0x1b,
	0x6c, 0x92, 0x92, 0xa6, 0xc5, 0xbd, 0x85, 0xaf, 0xe3, 0x1b, 0xec, 0xb8, 0xa3, 0x27, 0x91, 0xf6,
	0x45, 0xa4, 0xe9, 0xb6, 0xee, 0xf6, 0xf5, 0xff, 0xfd, 0xfa, 0xe3, 0xcb, 0x1f, 0x5e, 0xb3, 0x80,
	0x60, 0x22, 0x15, 0xc5, 0x24, 0xf6, 0x85, 0xa0, 0x09, 0x2e, 0xdc, 0xcd, 0xe8, 0xa4, 0x4a, 0x6a,
	0x69, 0x9f, 0xb2, 0x80, 0x38, 0x35, 0xe2, 0x6c, 0xf2, 0xc2, 0xed, 0x9d, 0x45, 0x32, 0x92, 0x66,
	0x8f, 0xeb, 0xa9, 0x41, 0x7b, 0x37, 0xad, 0x4d, 0x72, 0xce, 0x34, 0xa7, 0x42, 0x1b, 0xe1, 0xf6,
	0xab, 0x01, 0x07, 0xdf, 0x00, 0xc2, 0xe7, 0xc6, 0xf6, 0x22, 0x42, 0xfb, 0x12, 0x76, 0x48, 0xc2,
	0xa8, 0xd0, 0x1e, 0x0b, 0xbb, 0xa0, 0x0f, 0x86, 0x9d, 0xd9, 0x51, 0x13, 0x4c, 0x42, 0xfb, 0x01,
	0x5e, 0x10, 0x99, 0x0b, 0x4d, 0x55, 0xea, 0x2b, 0xbd, 0xf0, 0xd6, 0x57, 0xd4, 0xe8, 0x9e, 0x41,
	0xcf, 0x77, 0xd7, 0x6b, 0xeb, 0x24, 0xb4, 0xe7, 0xd0, 0xe6, 0x54, 0x7d, 0x24, 0xd4, 0x4b, 0x7d,
	0x1d, 0x7b, 0xa9, 0xa2, 0xef, 0xec, 0xb3, 0xbb, 0xdf, 0x07, 0xc3, 0x63, 0x77, 0xe0, 0xb4, 0x8f,
	0x6a, 0x6f, 0x2b, 0x5c, 0xe7, 0xd5, 0xfc, 0x31, 0xf5, 0x75, 0x3c, 0x3e, 0x58, 0xfe, 0x5e, 0x59,
	0xb3, 0x13, 0xbe, 0x4d, 0xa6, 0xc6, 0x30, 0x9e, 0x2f, 0x4b, 0x04, 0x56, 0x25, 0x02, 0x7f, 0x25,
	0x02, 0x5f, 0x15, 0xb2, 0x56, 0x15, 0xb2, 0x7e, 0x2a, 0x64, 0xbd, 0x3d, 0x45, 0x4c, 0xc7, 0x79,
	0x50, 0x2b, 0x31, 0x91, 0x19, 0x97, 0x19, 0x66, 0x01, 0x19, 0x45, 0x12, 0x17, 0x8f, 0x98, 0xcb,
	0x30, 0x4f, 0x68, 0xd6, 0xd4, 0x73, 0x7b, 0x3f, 0xda, 0xe9, 0x5b, 0x2f, 0x52, 0x9a, 0x05, 0x87,
	0xa6, 0x9a, 0xbb, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x6d, 0xb2, 0x17, 0x93, 0x01, 0x00,
	0x00,
}

func (m *ChannelEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MerklePathPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChannel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintChannel(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintChannel(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChannel(dAtA []byte, offset int, v uint64) int {
	offset -= sovChannel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChannelEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = m.MerklePathPrefix.Size()
	n += 1 + l + sovChannel(uint64(l))
	return n
}

func sovChannel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChannel(x uint64) (n int) {
	return sovChannel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerklePathPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MerklePathPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChannel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChannel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChannel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChannel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChannel = fmt.Errorf("proto: unexpected end of group")
)
