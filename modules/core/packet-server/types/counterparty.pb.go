// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/packetserver/v1/counterparty.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	v2 "github.com/cosmos/ibc-go/v9/modules/core/23-commitment/types/v2"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Counterparty defines the counterparty for a light client to implement IBC eureka protocol
type Counterparty struct {
	// the client identifier of the counterparty chain
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// the key path used to store packet flow messages intended for the counterparty
	// here we do not prefix with the IBC store path because the SDK already prefixes
	// the key for us.
	PacketPath []byte `protobuf:"bytes,2,opt,name=packet_path,json=packetPath,proto3" json:"packet_path,omitempty"`
	// the key path used to store packet flow messages that the counterparty
	// will use to send to us.
	CounterpartyPacketPath v2.MerklePath `protobuf:"bytes,3,opt,name=counterparty_packet_path,json=counterpartyPacketPath,proto3" json:"counterparty_packet_path"`
}

func (m *Counterparty) Reset()         { *m = Counterparty{} }
func (m *Counterparty) String() string { return proto.CompactTextString(m) }
func (*Counterparty) ProtoMessage()    {}
func (*Counterparty) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0c60a0709a0040c, []int{0}
}
func (m *Counterparty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Counterparty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Counterparty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Counterparty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counterparty.Merge(m, src)
}
func (m *Counterparty) XXX_Size() int {
	return m.Size()
}
func (m *Counterparty) XXX_DiscardUnknown() {
	xxx_messageInfo_Counterparty.DiscardUnknown(m)
}

var xxx_messageInfo_Counterparty proto.InternalMessageInfo

func (m *Counterparty) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Counterparty) GetPacketPath() []byte {
	if m != nil {
		return m.PacketPath
	}
	return nil
}

func (m *Counterparty) GetCounterpartyPacketPath() v2.MerklePath {
	if m != nil {
		return m.CounterpartyPacketPath
	}
	return v2.MerklePath{}
}

func init() {
	proto.RegisterType((*Counterparty)(nil), "ibc.core.packetserver.v1.Counterparty")
}

func init() {
	proto.RegisterFile("ibc/core/packetserver/v1/counterparty.proto", fileDescriptor_e0c60a0709a0040c)
}

var fileDescriptor_e0c60a0709a0040c = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x6a, 0xeb, 0x30,
	0x14, 0x86, 0xad, 0x7b, 0x4b, 0x69, 0x94, 0x4c, 0xa6, 0x14, 0x93, 0x82, 0x12, 0xb2, 0xd4, 0x50,
	0x22, 0x11, 0x77, 0x2a, 0x74, 0x4a, 0xa7, 0x0e, 0x85, 0xe0, 0xa1, 0x43, 0x17, 0x63, 0xc9, 0xc2,
	0x16, 0xb1, 0x2d, 0x23, 0xcb, 0x82, 0xbc, 0x45, 0x1f, 0xa5, 0x8f, 0x91, 0x31, 0x63, 0xa7, 0x52,
	0xec, 0x17, 0x29, 0x8e, 0x8b, 0xd1, 0x26, 0x1d, 0x3e, 0xbe, 0xff, 0x9c, 0x1f, 0xde, 0x0b, 0xca,
	0x08, 0x93, 0x8a, 0x93, 0x2a, 0x66, 0x7b, 0xae, 0x6b, 0xae, 0x0c, 0x57, 0xc4, 0x6c, 0x08, 0x93,
	0x4d, 0xa9, 0xb9, 0xaa, 0x62, 0xa5, 0x0f, 0xb8, 0x52, 0x52, 0x4b, 0xd7, 0x13, 0x94, 0xe1, 0x1e,
	0xc6, 0x36, 0x8c, 0xcd, 0x66, 0x7e, 0x9d, 0xca, 0x54, 0x9e, 0x21, 0xd2, 0xbf, 0x06, 0x7e, 0x7e,
	0x37, 0xca, 0x99, 0x2c, 0x0a, 0xa1, 0x0b, 0x5e, 0x6a, 0x62, 0x02, 0xeb, 0x37, 0x80, 0xab, 0x4f,
	0x00, 0x67, 0xcf, 0x56, 0x9e, 0x7b, 0x0b, 0x27, 0x2c, 0x17, 0xbc, 0xd4, 0x91, 0x48, 0x3c, 0xb0,
	0x04, 0xfe, 0x24, 0xbc, 0x1a, 0x06, 0x2f, 0x89, 0xbb, 0x80, 0xd3, 0x21, 0x3f, 0xaa, 0x62, 0x9d,
	0x79, 0xff, 0x96, 0xc0, 0x9f, 0x85, 0x70, 0x18, 0xed, 0x62, 0x9d, 0xb9, 0x14, 0x7a, 0xf6, 0xf6,
	0x91, 0x4d, 0xff, 0x5f, 0x02, 0x7f, 0x1a, 0xac, 0xf0, 0x78, 0x8a, 0xb5, 0x8c, 0x09, 0xf0, 0x2b,
	0x57, 0xfb, 0x9c, 0xf7, 0x96, 0xed, 0xc5, 0xf1, 0x7b, 0xe1, 0x84, 0x37, 0xb6, 0x69, 0x37, 0x66,
	0x6c, 0xdf, 0x8e, 0x2d, 0x02, 0xa7, 0x16, 0x81, 0x9f, 0x16, 0x81, 0x8f, 0x0e, 0x39, 0xa7, 0x0e,
	0x39, 0x5f, 0x1d, 0x72, 0xde, 0x9f, 0x52, 0xa1, 0xb3, 0x86, 0xf6, 0x62, 0xc2, 0x64, 0x5d, 0xc8,
	0x9a, 0x08, 0xca, 0xd6, 0xa9, 0x24, 0xe6, 0x91, 0x14, 0x32, 0x69, 0x72, 0x5e, 0xdb, 0x95, 0xaf,
	0xff, 0x3a, 0xd7, 0x87, 0x8a, 0xd7, 0xf4, 0xf2, 0xdc, 0xc8, 0xc3, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfb, 0xa6, 0x1a, 0x97, 0x99, 0x01, 0x00, 0x00,
}

func (m *Counterparty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Counterparty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Counterparty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CounterpartyPacketPath.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCounterparty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PacketPath) > 0 {
		i -= len(m.PacketPath)
		copy(dAtA[i:], m.PacketPath)
		i = encodeVarintCounterparty(dAtA, i, uint64(len(m.PacketPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintCounterparty(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCounterparty(dAtA []byte, offset int, v uint64) int {
	offset -= sovCounterparty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Counterparty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovCounterparty(uint64(l))
	}
	l = len(m.PacketPath)
	if l > 0 {
		n += 1 + l + sovCounterparty(uint64(l))
	}
	l = m.CounterpartyPacketPath.Size()
	n += 1 + l + sovCounterparty(uint64(l))
	return n
}

func sovCounterparty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCounterparty(x uint64) (n int) {
	return sovCounterparty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Counterparty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounterparty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Counterparty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Counterparty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterparty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounterparty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCounterparty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketPath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterparty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCounterparty
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCounterparty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketPath = append(m.PacketPath[:0], dAtA[iNdEx:postIndex]...)
			if m.PacketPath == nil {
				m.PacketPath = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPacketPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterparty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounterparty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounterparty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CounterpartyPacketPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCounterparty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCounterparty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCounterparty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCounterparty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounterparty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounterparty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCounterparty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCounterparty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCounterparty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCounterparty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCounterparty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCounterparty = fmt.Errorf("proto: unexpected end of group")
)
